I"%R<h1 id="元编程相关博文的目录及链接">元编程相关博文的目录及链接</h1>
<p>这篇博文是元编程系列博文中的其中一篇、这个系列中其他博文的目录和连接见下：</p>

<ol>
  <li><a href="https://halfclock.github.io/2019/06/01/python-property/">使用 python 特性管理实例属性</a></li>
  <li><a href="https://halfclock.github.io/2019/06/03/python-descriptor_01/">浅析 python 属性描述符（上）</a></li>
  <li><a href="https://halfclock.github.io/2019/06/04/python-descriptor_02/">浅析 python 属性描述符（下）</a></li>
  <li><a href="https://halfclock.github.io/2019/06/07/python-import-and-running/">python 导入时与运行时</a></li>
  <li><a href="https://halfclock.github.io/2019/06/09/python-metacoding/">python 元编程之动态属性</a></li>
  <li><a href="https://halfclock.github.io/2019/06/10/python-class-metacoding/">python 元编程之类元编程</a></li>
</ol>

<h1 id="前言">前言</h1>

<p>元编程是一门程序运行时动态创建属性/类的技术，本篇文章主要讲述创建动态属性，也可以说是属性元编程技术。</p>

<p>元编程这个词汇看起来很高大上，但是在生产环境中用的也不少，而所谓的属性元编程实际上就是<strong>在程序运行时为实例动态增加属性。</strong></p>

<p>这样一来，<strong>使用特性(property)管理实例属性其实也算是一类属性元编程</strong>，当用户访问实例本不存在的属性时，python 解释器从类中搜索有无特性（类属性承载），若有则会调用特性的相关接口并动态<strong>创建/赋给</strong>真实的实例属性。</p>

<blockquote>
  <p>同理，属性描述符也是一类属性元编程技术。</p>
</blockquote>

<p>然而、<strong>在解释器从类和超类搜索不到相应的特性/属性描述符时</strong>，python 也提供了相应的接口来处理找不到的属性，这就为我们提供了实现属性元编程的方法。</p>

<h1 id="特性能够动态创建实例属性">特性能够动态创建实例属性</h1>
<p>如果你读过系列文章第一篇，那么一定了解了 python 特性的概念以及如何使用，如果你读过系列文章的第二篇，那么一定了解 python 特性的本质，以及其在何时使用。</p>

<p>接下来我会用一个例子来说明特性如何动态创建实例属性。</p>

<blockquote>
  <p>还是 Fruits 类的例子，只不过这次为了更好的展示特性如何动态创建实例属性，有一些逻辑上的错误。</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="rouge-code"><pre><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">Fruits</span><span class="p">:</span>
    
        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">pass</span>
    
        <span class="o">@</span><span class="nb">property</span>
        <span class="k">def</span> <span class="nf">weight</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__weight</span>
    
        <span class="o">@</span><span class="n">weight</span><span class="o">.</span><span class="n">setter</span>
        <span class="k">def</span> <span class="nf">weight</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">value</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">__weight</span> <span class="o">=</span> <span class="n">value</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"想干嘛呢？"</span><span class="p">)</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">apple</span> <span class="o">=</span> <span class="n">Fruits</span><span class="p">()</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">vars</span><span class="p">(</span><span class="n">apple</span><span class="p">)</span> <span class="c1"># 1
</span><span class="p">{}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">apple</span><span class="o">.</span><span class="n">weight</span> <span class="o">=</span> <span class="mi">2</span> <span class="c1"># 2
</span><span class="o">&gt;&gt;&gt;</span> <span class="nb">vars</span><span class="p">(</span><span class="n">apple</span><span class="p">)</span> <span class="c1"># 3
</span><span class="p">{</span><span class="s">'_Fruits__weight'</span><span class="p">:</span> <span class="mi">2</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">apple</span><span class="o">.</span><span class="n">weight</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
<span class="n">Traceback</span> <span class="p">(</span><span class="n">most</span> <span class="n">recent</span> <span class="n">call</span> <span class="n">last</span><span class="p">):</span>
<span class="o">...</span>
<span class="nb">ValueError</span><span class="p">:</span> <span class="err">想干嘛呢？</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><strong>解释：</strong></p>

<ol>
  <li>通过 vars() 查看实例的属性、因为我让 <code class="highlighter-rouge">__init__</code> 方法为空，所以 apple 实例没有任何属性。</li>
  <li>直接为实例的 weight 属性赋值，这里实际上会调用 Fruit 类 weight 特性的 “set” 方法。</li>
  <li>赋值后再次查看 apple 实例的变量，这一次 apple 实例却有属性了还是私有属性 <code class="highlighter-rouge">_Fruits__weight</code>。</li>
</ol>

<blockquote>
  <p>在上例中，直接 pass 掉 <code class="highlighter-rouge">__init__</code> 是逻辑错误的，但是却能够帮助我们看清特性是如何动态创建实例属性的。</p>
</blockquote>

<p>重点是、在运行时<strong>解释器为 apple 实例动态创建了一个私有属性</strong> <code class="highlighter-rouge">_Fruits__weight</code> <strong>并能对其的设值进行动态验证。</strong></p>

<p>如果你读过<a href="https://halfclock.github.io/2019/06/01/python-property/">使用 python 特性管理实例属性</a>，你应该会知道在使用 <code class="highlighter-rouge">obj.attr = value</code> 语句时解释器会去类中搜索有无特性/覆盖型属性描述符，有特性/覆盖型属性描述符时会调用它们的接口、若都没有，才会去搜索实例的属性字典。</p>

<p>实际上、这个过程是由 python 提供的一对 magic 方法 —— <code class="highlighter-rouge">__getattribute__</code> 和 <code class="highlighter-rouge">__setattr__</code> 实现的，也就是说语句 <code class="highlighter-rouge">obj.attr</code> 或 <code class="highlighter-rouge">getattr(obj,attr)</code> 无论如何也会调用 obj 的 <code class="highlighter-rouge">__getattribute__(self,name)</code>，语句 <code class="highlighter-rouge">obj.attr = value</code> 无论如何也会调用 obj 的 <code class="highlighter-rouge">__setattr__(self,name,value)</code>，并由它们来进行寻找特性/属性描述符的工作。</p>

<p>而当实例没有该属性，所属的类也没有对应的特性/属性描述符时，<code class="highlighter-rouge">__getattribute__(self,name)</code> 方法不会直接抛出异常，而是会<strong>调用另一个 magic 方法</strong> <code class="highlighter-rouge">__getattr__(self,name)</code>。</p>

<h1 id="使用-__getattr__-创建属性">使用 <code class="highlighter-rouge">__getattr__</code> 创建属性</h1>

<p>现在，水果店老板给了你一个水果列表，包括<strong>水果的名字和该水果对应的描述</strong>，这个列表有数百种水果。麻烦的是，产品经理小姐姐提出了一个<strong>奇怪的需求</strong>：要求你<strong>必须使用 “obj.某水果的名字” 的形式来获取该水果的描述</strong>，而不能使用字典的形式 dict[“某水果的名字”] 获取。</p>

<p>在小姐姐向你抛了一个媚眼后，你答应了她，并写下了如下代码。(๑´ㅂ`๑)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
</pre></td><td class="rouge-code"><pre><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">FruitsList</span><span class="p">:</span>

        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fdict</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">fruit_dict</span> <span class="o">=</span> <span class="n">fdict</span>
    
        <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">fruit_dict</span><span class="p">[</span><span class="n">item</span><span class="p">]</span>

<span class="o">&gt;&gt;&gt;</span> <span class="n">fdict</span> <span class="o">=</span> <span class="p">{</span><span class="s">"apple"</span><span class="p">:</span> <span class="s">"apple description"</span><span class="p">,</span> <span class="s">"pear"</span> <span class="p">:</span> <span class="s">"pear description"</span><span class="p">,</span> <span class="s">"banana"</span> <span class="p">:</span> <span class="s">"banana description"</span><span class="p">}</span> <span class="c1"># 1
</span><span class="o">&gt;&gt;&gt;</span> <span class="n">fruitlist</span> <span class="o">=</span> <span class="n">FruitsList</span><span class="p">(</span><span class="n">fdict</span><span class="p">)</span> <span class="c1"># 2
</span><span class="o">&gt;&gt;&gt;</span> <span class="nb">vars</span><span class="p">(</span><span class="n">fruitlist</span><span class="p">)</span> <span class="c1"># 3
</span><span class="p">{</span><span class="s">'fruit_dict'</span><span class="p">:</span> <span class="p">{</span><span class="s">'apple'</span><span class="p">:</span> <span class="s">'apple description'</span><span class="p">,</span> <span class="s">'pear'</span><span class="p">:</span> <span class="s">'pear description'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">:</span> <span class="s">'banana description'</span><span class="p">}}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">fruitlist</span><span class="o">.</span><span class="n">apple</span> <span class="c1"># 4
</span><span class="n">apple</span> <span class="n">description</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">fruitlist</span><span class="o">.</span><span class="n">pear</span> <span class="c1"># 5
</span><span class="n">pear</span> <span class="n">description</span>
<span class="o">&gt;&gt;&gt;</span> <span class="nb">vars</span><span class="p">(</span><span class="n">fruitlist</span><span class="p">)</span> <span class="c1"># 6
</span><span class="p">{</span><span class="s">'fruit_dict'</span><span class="p">:</span> <span class="p">{</span><span class="s">'apple'</span><span class="p">:</span> <span class="s">'apple description'</span><span class="p">,</span> <span class="s">'pear'</span><span class="p">:</span> <span class="s">'pear description'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">:</span> <span class="s">'banana description'</span><span class="p">}}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>解释：</p>

<ol>
  <li>fdict 是老板给的水果数据的<strong>模拟测试数据</strong>，只包含三种水果。</li>
  <li>使用 fdict 构建 FruitsList 实例。</li>
  <li>查看 fruitslist 实例的属性、发现其<strong>只有一个属性</strong> —— fruit_dict 。</li>
  <li>访问实例的 apple 属性，并<strong>成功拿到其值。</strong></li>
  <li>访问实例的 pear 属性，并<strong>成功拿到其值。</strong></li>
  <li>此时 fruitslist 实例<strong>还是只有一个属性。</strong></li>
</ol>

<p>上面这个例子表明了解释器在实例没有对应属性、实例所属的类没有对应特性/属性描述符时，python 解释器会如何处理实例属性的访问 —— 调用 <code class="highlighter-rouge">__getattr__(self,name)</code> 特殊方法。</p>

<p>这个例子中，在访问 fruitlist 实例不存在的属性时，解释器动态返回了值，<strong>看上去就好像运行时依据 fruit_dict 动态为 fruitlist 实例创建了属性一样</strong>。没错，使用 <code class="highlighter-rouge">__getattr__(self,name)</code> 很容易就实现了属性元编程。</p>

<p>当有数百种水果都需要用像<strong>访问实例属性的方式</strong>来访问时，我们不可能为 FruitList 类手动创建数百种水果属性或者特性，显然使用 <code class="highlighter-rouge">__getattr__(self,name)</code> 相对合理。</p>

<hr />

<p><strong>产品经理小姐姐提出的需求并不合理</strong>、但是，日常生产中的确有<strong>类似的应用场景</strong>，例如，当 python 加载如下的 json 格式的数据时，我们想要拿到最里层 “d1” 的值，通常使用字典访问：<code class="highlighter-rouge">data["a"]["d"][0]["d1"]</code>，这很麻烦。</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="rouge-code"><pre><span class="p">{</span>
    <span class="s">"a"</span><span class="p">:{</span>
        <span class="s">"b"</span><span class="p">:[{</span><span class="s">"b1"</span><span class="p">:</span><span class="s">"bv"</span><span class="p">}],</span>
        <span class="s">"c"</span><span class="p">:[{</span><span class="s">"c1"</span><span class="p">:</span><span class="s">"cv"</span><span class="p">}],</span>
        <span class="s">"d"</span><span class="p">:[{</span><span class="s">"d1"</span><span class="p">:</span><span class="s">"dv"</span><span class="p">}]</span>
    <span class="p">}</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p>但是，当我们合理编写 <code class="highlighter-rouge">__getattr__(self,name)</code> magic 方法，我们就能实现 <code class="highlighter-rouge">data.a.b.d[0].d1</code> 这样的访问方式，少了一堆中括号和双引号看上去会舒服得多，这就是动态属性访问的魅力。</p>

<blockquote>
  <p>使用动态属性访问 JSON 类数据的代码有很多（网上有大量实现），不过《流畅的 python》 第 19 章有一个实现相对简单，这里是源码 -&gt; <a href="https://github.com/fluentpython/example-code/blob/master/19-dyn-attr-prop/oscon/explore0.py">FrozenJSON</a></p>
</blockquote>

<h1 id="使用-__dict__-快速创建属性">使用 <code class="highlighter-rouge">__dict__</code> 快速创建属性</h1>

<p>对于上面这个例子来讲，还有一个简单的方法能够在运行时的动态为 fruitlist 创建属性 —— 使用 <code class="highlighter-rouge">__dict__</code> 特殊属性。</p>

<p>将上述代码重构：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="rouge-code"><pre><span class="o">&gt;&gt;&gt;</span> <span class="k">class</span> <span class="nc">FruitsList</span><span class="p">:</span>

        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">fdict</span><span class="p">):</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">__dict__</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">fdict</span><span class="p">)</span>  <span class="c1"># 1
</span>   

<span class="o">&gt;&gt;&gt;</span> <span class="n">fdict</span> <span class="o">=</span> <span class="p">{</span><span class="s">"apple"</span><span class="p">:</span> <span class="s">"apple description"</span><span class="p">,</span> <span class="s">"pear"</span> <span class="p">:</span> <span class="s">"pear description"</span><span class="p">,</span> <span class="s">"banana"</span> <span class="p">:</span> <span class="s">"banana description"</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">fruitlist</span> <span class="o">=</span> <span class="n">FruitsList</span><span class="p">(</span><span class="n">fdict</span><span class="p">)</span> <span class="c1"># 2
</span><span class="o">&gt;&gt;&gt;</span> <span class="nb">vars</span><span class="p">(</span><span class="n">fruitlist</span><span class="p">)</span> <span class="c1"># 3
</span><span class="p">{</span><span class="s">'apple'</span><span class="p">:</span> <span class="s">'apple description'</span><span class="p">,</span> <span class="s">'pear'</span><span class="p">:</span> <span class="s">'pear description'</span><span class="p">,</span> <span class="s">'banana'</span><span class="p">:</span> <span class="s">'banana description'</span><span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">fruitlist</span><span class="o">.</span><span class="n">apple</span> <span class="c1"># 4
</span><span class="n">apple</span> <span class="n">description</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">fruitlist</span><span class="o">.</span><span class="n">pear</span>
<span class="n">pear</span> <span class="n">description</span>
</pre></td></tr></tbody></table></code></pre></div></div>
<p>解释：</p>

<ol>
  <li>FruitsList 类的构造方法将传进来的参数都放进实例的 <code class="highlighter-rouge">__dict__</code> 中。</li>
  <li>使用 fdict 构造实例。</li>
  <li>查看 fruitlist 实例的属性，发现此时实例属性已经更新，其拥有了 fdict 里的所有数据。</li>
  <li>访问实例的 apple 属性，发现可以拿到正确的数据。</li>
</ol>

<p>在 python 中，<code class="highlighter-rouge">__dict__</code> 是存储着对象或者类的可写属性。有 <code class="highlighter-rouge">__dict__</code> 属性的对象任何时候都能随意设置新属性值。如果类有 <code class="highlighter-rouge">__slots__</code> 属性，那么它的实例可能就没有 <code class="highlighter-rouge">__dict__</code> 属性。</p>

<blockquote>
  <p>类可以定义 <code class="highlighter-rouge">__slots__</code> 属性，限制实例能够有哪些属性。<code class="highlighter-rouge">__slots__</code> 属性的值是一个字符串组成的元组，指明允许有的属性。</p>
</blockquote>

<h1 id="end">End</h1>

<p>总的来说、python 里动态创建属性难度不大、除了使用特性和属性描述符在解释器调用 <code class="highlighter-rouge">__getattribute__(self,name)</code> 阶段动态创建属性、我们还可以在解释器调用 <code class="highlighter-rouge">__getattr__(self,name)</code> 阶段动态创建属性，甚至，我们能够<strong>直接使用 <code class="highlighter-rouge">__dict__</code> 属性直接批量动态创建实例属性</strong>。</p>

<p>但是使用 <code class="highlighter-rouge">__dict__</code> 不太安全，因为你永远不知道用户传递的数据是怎样的，规范与否，字典嵌套了几层等都不是我们能控制的，所以我更推荐使用像 <a href="https://github.com/fluentpython/example-code/blob/master/19-dyn-attr-prop/oscon/explore0.py">FrozenJSON</a> 这样的处理方式，<strong>自己在 <code class="highlighter-rouge">__getattr__(self,name)</code> 里编写控制代码总是要安心的多。</strong></p>

<p>除了动态创建属性，python 甚至可以<strong>动态创建/修改类</strong>，这就<strong>涉及到类的类 —— 元类</strong>。</p>
:ET